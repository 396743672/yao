# 所有服务的全局配置

info:
  app:
    name: ${spring.application.name}
    version: @project.version@
    groupId: @project.groupId@
    artifactId: @project.artifactId@
    encoding: @project.build.sourceEncoding@
  java:
    source: @java.version@
    target: @java.version@

# 公共配置地址
base:
  auth:
    server: http://localhost:8000
  zipkin:
    url: http://localhost:9411/

logging:
  file: ./logs/${spring.application.name}/${spring.application.name}.log
  pattern:
    file: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

spring:
  #热部署配置
  devtools:
    restart:
      enabled: true
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  # 分布式链路追踪配置
  zipkin:
    base-url: ${base.zipkin.url}
  sleuth:
    sampler:
      probability: 1 #样本采集量，默认为0.1，为了测试这里修改为1，正式环境一般使用默认值。
  #消息队列配置
  rabbitmq:
    host: ${RABBIT_MQ_HOST:132.232.11.210}
    port: ${RABBIT_MQ_PORT:5672}
    username: ${RABBIT_MQ_USERNAME:guest}
    password: ${RABBIT_MQ_PASSWORD:guest}
    #redis配置
  redis:
    database: 0
    host: ${REDIS_HOST:132.232.11.210}
    port: ${REDIS_PORT:6379}
    #    password: yxy727      # 密码（默认为空）
    timeout: 6000ms  # 连接超时时长（毫秒）
    jedis:
      pool:
        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 10      # 连接池中的最大空闲连接
        min-idle: 5       # 连接池中的最小空闲连接
  security:
    oauth2:
      jwt:
        signingKey: 123456

server:
  tomcat:
    max-threads: 200 # Maximum amount of worker threads.
    min-spare-threads: 10 # Minimum amount of worker threads

#jasypt加解密方式配置
jasypt:
  encryptor:
    password: 123456 #根密码

# eureka配置
eureka:
  client:
    # eureka客户端从eureka服务器注册表中获取服务注册信息的时间间隔（s），默认为30秒,开发阶段调小
    registry-fetch-interval-seconds: 10
  instance:
    # 注册服务ip到eureka server上
    prefer-ip-address: true
    # 自定义服务实例id
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
    # 服务实例的续约到期时间（默认90秒），也就是心跳的最大等待时间。开发阶段调小
    lease-expiration-duration-in-seconds: 10
    # 服务实例的续约更新时间间隔（默认30秒），也就是心跳时间。开发阶段调小
    lease-renewal-interval-in-seconds: 6
    metadata-map:
      # 服务实例权重 默认100
      weight: 100
      # 服务actuator的管理port，如果设置了的话，Turbine监控台就获取不到对应服务的hystrix.stream。这里就需要设置，Turbine会读取这个端口。
      management.port: ${management.port:${server.port}}

# hystrix配置
hystrix:
  threadpool:
    default:
      coreSize: 100
      maxQueueSize: 1000
      queueSizeRejectionThreshold: 800
  command:
    default:
      execution:
        isolation:
          thread:
            # 断路器的超时时间,断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试。
            timeoutInMilliseconds: 61000

# ribbon配置
#ribbon:
#  eager-load:
#    enabled: true
#    clients: taroco-admin,taroco-rbac-service,taroco-authentication-server
#  # ribbon请求连接的超时时间 默认2秒 ms
#  ConnectTimeout: 5000
#  # 请求处理的超时时间 默认5秒 ms
#  ReadTimeout: 5000
#  # 对所有操作请求都进行重试,不配置这个MaxAutoRetries不起作用 默认false
#  OkToRetryOnAllOperations: true
#  # 对当前实例的重试次数 默认0
#  MaxAutoRetries: 1
#  # 切换实例的重试次数 默认1
#  MaxAutoRetriesNextServer: 2
#  # 自定义的ribbon负载均衡策略 默认com.netflix.loadbalancer.AvailabilityFilteringRule
#  NFLoadBalancerRuleClassName: cn.taroco.common.ribbon.XlabelWeightMetadataRule
#  # 从注册中心刷新servelist的时间 默认30秒 ms
#  ServerListRefreshInterval: 15000


feign:
  hystrix:
    enabled: true
  client:
    config:
      feignName:
        connectTimeout: 5000
        readTimeout: 5000
  compression:
    request:
      enabled: true
    response:
      enabled: true


